//@ts-check

import test, { describe } from "node:test";
import assert from "node:assert/strict";
import { checkTypeOf } from "../../src/jsh/types.mjs";

describe("JSH Type Checker", () => {
  const testValues = [
    "a string",
    "a.valid.path",
    "another.valid\\.path",
    "123",
    "true",
    "null",
    "{}",
    "[]",
    "",
    123,
    41.65,
    0,
    -153,
    -5.14,
    true,
    false,
    null,
    {},
    {
      a: 123,
      b: 678,
    },
    {
      c: "str1",
      d: "str2",
    },
    {
      a: 123,
      b: 678,
      c: "str1",
      d: "str2",
    },
    [],
    [123, 678],
    ["str1", "str2"],
    [123, 678, "str1", "str2"],
  ]

  function testAllCases(typeToTest, ...results) {
    if (results.length !== testValues.length) {
      throw new Error(`Invalid number of test cases, expected ${testValues.length}, given ${results.length}`);
    }
    testValues.forEach((v, i) => {
      let expectedResult = results[i];
      if (expectedResult === null) {
        test(`should return the given value '${JSON.stringify(v)}' with the type '${typeToTest}'`, () => {
          assert.deepStrictEqual(checkTypeOf(v, typeToTest), [v]);
        });
      } else if (expectedResult instanceof Array) {
        test(`should return ${JSON.stringify(expectedResult)} for the value '${JSON.stringify(v)}' with the type '${typeToTest}'`, () => {
          assert.deepStrictEqual(checkTypeOf(v, typeToTest), expectedResult);
        });
      } else {
        test(`should return the expected error for the value '${JSON.stringify(v)}' with the type '${typeToTest}'`, () => {
          assert.deepStrictEqual(checkTypeOf(v, typeToTest), [null, expectedResult]);
        });
      }
    })
  }

  describe("'any' type", () => {
    testAllCases("any",
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
    );
  });

  describe("'string' type", () => {
    testAllCases("string",
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      "number is not string",
      "number is not string",
      "number is not string",
      "number is not string",
      "number is not string",
      "boolean is not string",
      "boolean is not string",
      "null is not string",
      "object is not string",
      "object is not string",
      "object is not string",
      "object is not string",
      "array is not string",
      "array is not string",
      "array is not string",
      "array is not string",
    );
  });

  describe("'number' type", () => {
    testAllCases("number",
      "string is not number",
      "string is not number",
      "string is not number",
      "string is not number",
      "string is not number",
      "string is not number",
      "string is not number",
      "string is not number",
      "string is not number",
      null,
      null,
      null,
      null,
      null,
      "boolean is not number",
      "boolean is not number",
      "null is not number",
      "object is not number",
      "object is not number",
      "object is not number",
      "object is not number",
      "array is not number",
      "array is not number",
      "array is not number",
      "array is not number",
    );
  });

  describe("'boolean' type", () => {
    testAllCases("boolean",
      "string is not boolean",
      "string is not boolean",
      "string is not boolean",
      "string is not boolean",
      "string is not boolean",
      "string is not boolean",
      "string is not boolean",
      "string is not boolean",
      "string is not boolean",
      "number is not boolean",
      "number is not boolean",
      "number is not boolean",
      "number is not boolean",
      "number is not boolean",
      null,
      null,
      "null is not boolean",
      "object is not boolean",
      "object is not boolean",
      "object is not boolean",
      "object is not boolean",
      "array is not boolean",
      "array is not boolean",
      "array is not boolean",
      "array is not boolean",
    );
  });

  describe("'null' type", () => {
    testAllCases("null",
      "string is not null",
      "string is not null",
      "string is not null",
      "string is not null",
      "string is not null",
      "string is not null",
      "string is not null",
      "string is not null",
      "string is not null",
      "number is not null",
      "number is not null",
      "number is not null",
      "number is not null",
      "number is not null",
      "boolean is not null",
      "boolean is not null",
      null,
      "object is not null",
      "object is not null",
      "object is not null",
      "object is not null",
      "array is not null",
      "array is not null",
      "array is not null",
      "array is not null",
    );
  });

  describe("'object' type", () => {
    testAllCases("object",
      "string is not object",
      "string is not object",
      "string is not object",
      "string is not object",
      "string is not object",
      "string is not object",
      "string is not object",
      "string is not object",
      "string is not object",
      "number is not object",
      "number is not object",
      "number is not object",
      "number is not object",
      "number is not object",
      "boolean is not object",
      "boolean is not object",
      "null is not object",
      null,
      null,
      null,
      null,
      "array is not object",
      "array is not object",
      "array is not object",
      "array is not object",
    );
  });

  describe("'array' type", () => {
    testAllCases("array",
      "string is not array",
      "string is not array",
      "string is not array",
      "string is not array",
      "string is not array",
      "string is not array",
      "string is not array",
      "string is not array",
      "string is not array",
      "number is not array",
      "number is not array",
      "number is not array",
      "number is not array",
      "number is not array",
      "boolean is not array",
      "boolean is not array",
      "null is not array",
      "object is not array",
      "object is not array",
      "object is not array",
      "object is not array",
      null,
      null,
      null,
      null,
    );
  });

  describe("'integer' type", () => {
    testAllCases("integer",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      "Is a number but not an integer",
      null,
      null,
      "Is a number but not an integer",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'positive' type", () => {
    testAllCases("positive",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      null,
      "Is a number but not positive",
      "Is a number but not positive",
      "Is a number but not positive",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'negative' type", () => {
    testAllCases("negative",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "Is a number but not negative",
      "Is a number but not negative",
      "Is a number but not negative",
      null,
      null,
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'zero' type", () => {
    testAllCases("zero",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "Is a number but not zero",
      "Is a number but not zero",
      null,
      "Is a number but not zero",
      "Is a number but not zero",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'path' type", () => {
    testAllCases("path",
      [["a string"]],
      [["a", "valid", "path"]],
      [["another", "valid.path"]],
      [["123"]],
      [["true"]],
      [["null"]],
      [["{}"]],
      [["[]"]],
      [[""]],
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path cannot be an empty array.",
      [["123", "678"]],
      [["str1", "str2"]],
      [["123", "678", "str1", "str2"]],
    );
  });

  describe("'[and,positive,integer]' type", () => {
    testAllCases(["and", "positive", "integer"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      "Is a number but not an integer",
      "Is a number but not positive",
      "Is a number but not positive",
      "Is a number but not positive",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[or,number,string]' type", () => {
    testAllCases(["or", "number", "string"],
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      "boolean is not any of the types number, string",
      "boolean is not any of the types number, string",
      "null is not any of the types number, string",
      "object is not any of the types number, string",
      "object is not any of the types number, string",
      "object is not any of the types number, string",
      "object is not any of the types number, string",
      "array is not any of the types number, string",
      "array is not any of the types number, string",
      "array is not any of the types number, string",
      "array is not any of the types number, string",
    );
  });

  describe("'[array,string]' type", () => {
    testAllCases(["array", "string"],
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "boolean is not an array",
      "boolean is not an array",
      "null is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      null,
      "Value 0 is not of the type string",
      null,
      "Value 0 is not of the type string",
    );
  });

  describe("'[array,number]' type", () => {
    testAllCases(["array", "number"],
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "boolean is not an array",
      "boolean is not an array",
      "null is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      null,
      null,
      "Value 0 is not of the type number",
      "Value 2 is not of the type number",
    );
  });

  describe("'[array,[or,number,string]]' type", () => {
    testAllCases(["array", ["or", "number", "string"]],
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "boolean is not an array",
      "boolean is not an array",
      "null is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      null,
      null,
      null,
      null,
    );
  });

  describe("'[object,string]' type", () => {
    testAllCases(["object", "string"],
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "boolean is not an object",
      "boolean is not an object",
      "null is not an object",
      null,
      "Value a is not of the type string",
      null,
      "Value a is not of the type string",
      "array is not an object",
      "array is not an object",
      "array is not an object",
      "array is not an object",
    );
  });

  describe("'[object,number]' type", () => {
    testAllCases(["object", "number"],
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "boolean is not an object",
      "boolean is not an object",
      "null is not an object",
      null,
      null,
      "Value c is not of the type number",
      "Value c is not of the type number",
      "array is not an object",
      "array is not an object",
      "array is not an object",
      "array is not an object",
    );
  });

  describe("'[object,[or,number,string]]' type", () => {
    testAllCases(["object", ["or", "number", "string"]],
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "boolean is not an object",
      "boolean is not an object",
      "null is not an object",
      null,
      null,
      null,
      null,
      "array is not an object",
      "array is not an object",
      "array is not an object",
      "array is not an object",
    );
  });

  describe("'invalid' type", () => {
    testAllCases("invalid",
      "string is not invalid",
      "string is not invalid",
      "string is not invalid",
      "string is not invalid",
      "string is not invalid",
      "string is not invalid",
      "string is not invalid",
      "string is not invalid",
      "string is not invalid",
      "number is not invalid",
      "number is not invalid",
      "number is not invalid",
      "number is not invalid",
      "number is not invalid",
      "boolean is not invalid",
      "boolean is not invalid",
      "null is not invalid",
      "object is not invalid",
      "object is not invalid",
      "object is not invalid",
      "object is not invalid",
      "array is not invalid",
      "array is not invalid",
      "array is not invalid",
      "array is not invalid",
    );
  });

  describe("invalid number type", () => {
    testAllCases(123,
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
      "Type must be a string or an array",
    );
  });

  describe("empty array type", () => {
    testAllCases([],
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
      "[] is not a valid array type",
    );
  });

  describe("invalid array type", () => {
    testAllCases(["invalid"],
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
      "[\"invalid\"] is not a valid array type",
    );
  });

  describe("invalid main array type", () => {
    testAllCases(["invalidMain", "string"],
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
      "invalidmain is not a valid main type for an array type",
    );
  });
});