//@ts-check

import test, { describe } from "node:test";
import assert from "node:assert/strict";
import { checkTypeOf } from "../../src/jsh/types.mjs";

describe("JSH Type Checker", () => {
  const testValues = [
    "a string",
    "a.valid.path",
    "another.valid\\.path",
    "123",
    "true",
    "null",
    "{}",
    "[]",
    "",
    123,
    41.65,
    0,
    -153,
    -5.14,
    true,
    false,
    null,
    {},
    {
      a: 123,
      b: 678,
    },
    {
      c: "str1",
      d: "str2",
    },
    {
      a: 123,
      b: 678,
      c: "str1",
      d: "str2",
    },
    [],
    [123, 678],
    ["str1", "str2"],
    [123, 678, "str1", "str2"],
  ]

  function testAllCases(typeToTest, ...results) {
    if (results.length !== testValues.length) {
      throw new Error(`Invalid number of test cases, expected ${testValues.length}, given ${results.length}`);
    }
    testValues.forEach((v, i) => {
      let expectedResult = results[i];
      if (expectedResult === null) {
        test(`should return the given value '${JSON.stringify(v)}' (${i}) with the type '${typeToTest}'`, () => {
          assert.deepStrictEqual(checkTypeOf(v, typeToTest), [v]);
        });
      } else if (expectedResult instanceof Array) {
        test(`should return ${JSON.stringify(expectedResult)} for the value '${JSON.stringify(v)}' (${i}) with the type '${typeToTest}'`, () => {
          assert.deepStrictEqual(checkTypeOf(v, typeToTest), expectedResult);
        });
      } else {
        test(`should return the expected error for the value '${JSON.stringify(v)}' (${i}) with the type '${typeToTest}'`, () => {
          assert.deepStrictEqual(checkTypeOf(v, typeToTest), [null, expectedResult]);
        });
      }
    })
  }

  describe("'any' type", () => {
    testAllCases("any",
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
    );
  });

  describe("'string' type", () => {
    testAllCases("string",
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      "number value is not of string type",
      "number value is not of string type",
      "number value is not of string type",
      "number value is not of string type",
      "number value is not of string type",
      "boolean value is not of string type",
      "boolean value is not of string type",
      "null value is not of string type",
      "object value is not of string type",
      "object value is not of string type",
      "object value is not of string type",
      "object value is not of string type",
      "array value is not of string type",
      "array value is not of string type",
      "array value is not of string type",
      "array value is not of string type",
    );
  });

  describe("'number' type", () => {
    testAllCases("number",
      "string value is not of number type",
      "string value is not of number type",
      "string value is not of number type",
      "string value is not of number type",
      "string value is not of number type",
      "string value is not of number type",
      "string value is not of number type",
      "string value is not of number type",
      "string value is not of number type",
      null,
      null,
      null,
      null,
      null,
      "boolean value is not of number type",
      "boolean value is not of number type",
      "null value is not of number type",
      "object value is not of number type",
      "object value is not of number type",
      "object value is not of number type",
      "object value is not of number type",
      "array value is not of number type",
      "array value is not of number type",
      "array value is not of number type",
      "array value is not of number type",
    );
  });

  describe("'boolean' type", () => {
    testAllCases("boolean",
      "string value is not of boolean type",
      "string value is not of boolean type",
      "string value is not of boolean type",
      "string value is not of boolean type",
      "string value is not of boolean type",
      "string value is not of boolean type",
      "string value is not of boolean type",
      "string value is not of boolean type",
      "string value is not of boolean type",
      "number value is not of boolean type",
      "number value is not of boolean type",
      "number value is not of boolean type",
      "number value is not of boolean type",
      "number value is not of boolean type",
      null,
      null,
      "null value is not of boolean type",
      "object value is not of boolean type",
      "object value is not of boolean type",
      "object value is not of boolean type",
      "object value is not of boolean type",
      "array value is not of boolean type",
      "array value is not of boolean type",
      "array value is not of boolean type",
      "array value is not of boolean type",
    );
  });

  describe("'null' type", () => {
    testAllCases("null",
      "string value is not of null type",
      "string value is not of null type",
      "string value is not of null type",
      "string value is not of null type",
      "string value is not of null type",
      "string value is not of null type",
      "string value is not of null type",
      "string value is not of null type",
      "string value is not of null type",
      "number value is not of null type",
      "number value is not of null type",
      "number value is not of null type",
      "number value is not of null type",
      "number value is not of null type",
      "boolean value is not of null type",
      "boolean value is not of null type",
      null,
      "object value is not of null type",
      "object value is not of null type",
      "object value is not of null type",
      "object value is not of null type",
      "array value is not of null type",
      "array value is not of null type",
      "array value is not of null type",
      "array value is not of null type",
    );
  });

  describe("'object' type", () => {
    testAllCases("object",
      "string value is not of object type",
      "string value is not of object type",
      "string value is not of object type",
      "string value is not of object type",
      "string value is not of object type",
      "string value is not of object type",
      "string value is not of object type",
      "string value is not of object type",
      "string value is not of object type",
      "number value is not of object type",
      "number value is not of object type",
      "number value is not of object type",
      "number value is not of object type",
      "number value is not of object type",
      "boolean value is not of object type",
      "boolean value is not of object type",
      "null value is not of object type",
      null,
      null,
      null,
      null,
      "array value is not of object type",
      "array value is not of object type",
      "array value is not of object type",
      "array value is not of object type",
    );
  });

  describe("'array' type", () => {
    testAllCases("array",
      "string value is not of array type",
      "string value is not of array type",
      "string value is not of array type",
      "string value is not of array type",
      "string value is not of array type",
      "string value is not of array type",
      "string value is not of array type",
      "string value is not of array type",
      "string value is not of array type",
      "number value is not of array type",
      "number value is not of array type",
      "number value is not of array type",
      "number value is not of array type",
      "number value is not of array type",
      "boolean value is not of array type",
      "boolean value is not of array type",
      "null value is not of array type",
      "object value is not of array type",
      "object value is not of array type",
      "object value is not of array type",
      "object value is not of array type",
      null,
      null,
      null,
      null,
    );
  });

  describe("'integer' type", () => {
    testAllCases("integer",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      "Is a number but not an integer",
      null,
      null,
      "Is a number but not an integer",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[number, positive]' type", () => {
    testAllCases(["number", "positive"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      null,
      "Is a number but not positive",
      "Is a number but not positive",
      "Is a number but not positive",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[number, negative]' type", () => {
    testAllCases(["number", "negative"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "Is a number but not negative",
      "Is a number but not negative",
      "Is a number but not negative",
      null,
      null,
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[number, zero]' type", () => {
    testAllCases(["number", "zero"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "Is a number but not zero",
      "Is a number but not zero",
      null,
      "Is a number but not zero",
      "Is a number but not zero",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[number, positive, zero]' type", () => {
    testAllCases(["number", "positive", "zero"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      null,
      null,
      "Is a number but its negative",
      "Is a number but its negative",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[number, negative, zero]' type", () => {
    testAllCases(["number", "negative", "zero"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "Is a number but its positive",
      "Is a number but its positive",
      null,
      null,
      null,
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[number, positive, negative]' type", () => {
    testAllCases(["number", "positive", "negative"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      null,
      "Is a number but its zero",
      null,
      null,
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[number, positive, negative, zero]' type", () => {
    testAllCases(["number", "positive", "negative", "zero"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      null,
      null,
      null,
      null,
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[integer, positive]' type", () => {
    testAllCases(["integer", "positive"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      "Is a number but not an integer",
      "Is a number but not positive",
      "Is a number but not positive",
      "Is a number but not an integer",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[integer, negative]' type", () => {
    testAllCases(["integer", "negative"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "Is a number but not negative",
      "Is a number but not an integer",
      "Is a number but not negative",
      null,
      "Is a number but not an integer",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[integer, zero]' type", () => {
    testAllCases(["integer", "zero"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "Is a number but not zero",
      "Is a number but not an integer",
      null,
      "Is a number but not zero",
      "Is a number but not an integer",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[integer, positive, zero]' type", () => {
    testAllCases(["integer", "positive", "zero"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      "Is a number but not an integer",
      null,
      "Is a number but its negative",
      "Is a number but not an integer",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[integer, negative, zero]' type", () => {
    testAllCases(["integer", "negative", "zero"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "Is a number but its positive",
      "Is a number but not an integer",
      null,
      null,
      "Is a number but not an integer",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[integer, positive, negative]' type", () => {
    testAllCases(["integer", "positive", "negative"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      "Is a number but not an integer",
      "Is a number but its zero",
      null,
      "Is a number but not an integer",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[integer, positive, negative, zero]' type", () => {
    testAllCases(["integer", "positive", "negative", "zero"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      "Is a number but not an integer",
      null,
      null,
      "Is a number but not an integer",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'path' type", () => {
    testAllCases("path",
      [["a string"]],
      [["a", "valid", "path"]],
      [["another", "valid.path"]],
      [["123"]],
      [["true"]],
      [["null"]],
      [["{}"]],
      [["[]"]],
      [[""]],
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path is not of the type string or array.",
      "Path cannot be an empty array.",
      [["123", "678"]],
      [["str1", "str2"]],
      [["123", "678", "str1", "str2"]],
    );
  });

  //TODO add better usage of an 'and' type.
  describe("'[and, [number, positive], integer]' type", () => {
    testAllCases(["and", ["number", "positive"], "integer"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      "Is a number but not an integer",
      "Is a number but not positive",
      "Is a number but not positive",
      "Is a number but not positive",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[or,number,string]' type", () => {
    testAllCases(["or", "number", "string"],
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      "boolean is not any of the types number, string",
      "boolean is not any of the types number, string",
      "null is not any of the types number, string",
      "object is not any of the types number, string",
      "object is not any of the types number, string",
      "object is not any of the types number, string",
      "object is not any of the types number, string",
      "array is not any of the types number, string",
      "array is not any of the types number, string",
      "array is not any of the types number, string",
      "array is not any of the types number, string",
    );
  });

  describe("'[array,string]' type", () => {
    testAllCases(["array", "string"],
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "boolean is not an array",
      "boolean is not an array",
      "null is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      null,
      "Value 0 is not of the type string",
      null,
      "Value 0 is not of the type string",
    );
  });

  describe("'[array,number]' type", () => {
    testAllCases(["array", "number"],
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "boolean is not an array",
      "boolean is not an array",
      "null is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      null,
      null,
      "Value 0 is not of the type number",
      "Value 2 is not of the type number",
    );
  });

  describe("'[array,[or,number,string]]' type", () => {
    testAllCases(["array", ["or", "number", "string"]],
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "boolean is not an array",
      "boolean is not an array",
      "null is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      null,
      null,
      null,
      null,
    );
  });

  describe("'[object,string]' type", () => {
    testAllCases(["object", "string"],
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "boolean is not an object",
      "boolean is not an object",
      "null is not an object",
      null,
      "Value a is not of the type string",
      null,
      "Value a is not of the type string",
      "array is not an object",
      "array is not an object",
      "array is not an object",
      "array is not an object",
    );
  });

  describe("'[object,number]' type", () => {
    testAllCases(["object", "number"],
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "boolean is not an object",
      "boolean is not an object",
      "null is not an object",
      null,
      null,
      "Value c is not of the type number",
      "Value c is not of the type number",
      "array is not an object",
      "array is not an object",
      "array is not an object",
      "array is not an object",
    );
  });

  describe("'[object,[or,number,string]]' type", () => {
    testAllCases(["object", ["or", "number", "string"]],
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "boolean is not an object",
      "boolean is not an object",
      "null is not an object",
      null,
      null,
      null,
      null,
      "array is not an object",
      "array is not an object",
      "array is not an object",
      "array is not an object",
    );
  });

  describe("'invalid' type", () => {
    testAllCases("invalid",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
      "'invalid' is not a valid simple type",
    );
  });

  describe("invalid number type", () => {
    testAllCases(123,
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
      "Type must be in a string or array format",
    );
  });

  describe("empty array type", () => {
    testAllCases([],
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
    );
  });

  describe("invalid array type", () => {
    testAllCases(["invalid"],
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
    );
  });

  describe("invalid main array type", () => {
    testAllCases(["invalidMain", "string"],
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
    );
  });
});