//@ts-check

import { describe } from "node:test";
import { testAllCases } from "../utils.mjs";

describe("Complex Type Checking", () => {
  //TODO add better usage of an 'and' type.
  describe("'[and, [number, positive], integer]' type", () => {
    testAllCases(["and", ["number", "positive"], "integer"],
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      "string is not a number",
      null,
      "Is a number but not an integer",
      "Is a number but not positive",
      "Is a number but not positive",
      "Is a number but not positive",
      "boolean is not a number",
      "boolean is not a number",
      "null is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "object is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
      "array is not a number",
    );
  });

  describe("'[or,number,string]' type", () => {
    testAllCases(["or", "number", "string"],
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      "boolean is not any of the types number, string",
      "boolean is not any of the types number, string",
      "null is not any of the types number, string",
      "object is not any of the types number, string",
      "object is not any of the types number, string",
      "object is not any of the types number, string",
      "object is not any of the types number, string",
      "array is not any of the types number, string",
      "array is not any of the types number, string",
      "array is not any of the types number, string",
      "array is not any of the types number, string",
    );
  });

  describe("'[array,string]' type", () => {
    testAllCases(["array", "string"],
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "boolean is not an array",
      "boolean is not an array",
      "null is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      null,
      "Value 0 is not of the type string",
      null,
      "Value 0 is not of the type string",
    );
  });

  describe("'[array,number]' type", () => {
    testAllCases(["array", "number"],
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "boolean is not an array",
      "boolean is not an array",
      "null is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      null,
      null,
      "Value 0 is not of the type number",
      "Value 2 is not of the type number",
    );
  });

  describe("'[array,[or,number,string]]' type", () => {
    testAllCases(["array", ["or", "number", "string"]],
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "string is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "number is not an array",
      "boolean is not an array",
      "boolean is not an array",
      "null is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      "object is not an array",
      null,
      null,
      null,
      null,
    );
  });

  describe("'[object,string]' type", () => {
    testAllCases(["object", "string"],
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "boolean is not an object",
      "boolean is not an object",
      "null is not an object",
      null,
      "Value a is not of the type string",
      null,
      "Value a is not of the type string",
      "array is not an object",
      "array is not an object",
      "array is not an object",
      "array is not an object",
    );
  });

  describe("'[object,number]' type", () => {
    testAllCases(["object", "number"],
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "boolean is not an object",
      "boolean is not an object",
      "null is not an object",
      null,
      null,
      "Value c is not of the type number",
      "Value c is not of the type number",
      "array is not an object",
      "array is not an object",
      "array is not an object",
      "array is not an object",
    );
  });

  describe("'[object,[or,number,string]]' type", () => {
    testAllCases(["object", ["or", "number", "string"]],
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "string is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "number is not an object",
      "boolean is not an object",
      "boolean is not an object",
      "null is not an object",
      null,
      null,
      null,
      null,
      "array is not an object",
      "array is not an object",
      "array is not an object",
      "array is not an object",
    );
  });

  describe("empty array type", () => {
    testAllCases([],
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
    );
  });

  describe("invalid array type", () => {
    testAllCases(["invalid"],
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
      "Complex types must have inner types",
    );
  });

  describe("invalid main array type", () => {
    testAllCases(["invalidMain", "string"],
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
      "invalidmain is not a valid complex type",
    );
  });
});